module nativebuild
imports 
	include/MoBL
 	lib/editor-common
 	util
 	generation/compile
 	editor/editor
rules
	external buildOnCloud(|username,password,appname,platforms) 
	
	native-build:
    (selected, position, ast, path, project-path) -> None()
    with try(dr-scope-all-end)
      ; dr-scope-all-start
    with {| Native: 
    	rules ( ProjectPath     := project-path  
    			Native := True()  
    			CachedParseAst  : path -> ast )
    	; try(if <file-exists> $[[project-path]/native/] then
              <deltree>  $[[project-path]/native/] 
            end)
    	; setting* := <get-configuration> 
    	; NativeSettings(nativesettings) := <fetch-elem(?NativeSettings(_))>setting*
    	; buildfarmUsername(username) := <fetch-elem(?buildfarmUsername(_))>nativesettings
    	; buildfarmPassword(password) := <fetch-elem(?buildfarmPassword(_))>nativesettings
    	; buildfarmPlatforms(platforms) := <fetch-elem(?buildfarmPlatforms(_))>nativesettings
        ; setup-paths
        ; Application(mod-name, _) := ast 
        ; rules ( CompilingModule := mod-name )
        ; <compile> ast
 	    ; where(<buildOnCloud(|<un-double-quote>username,<un-double-quote>password,mod-name,<uniq>platforms)>project-path)  
 	    ; where(<refresh-workspace-file> $[[project-path]/native/])
 	      
    	|}  
   
    
    
    configure-native-settings: setting* -> newsetting* 
    where 
    	if(<fetch(?HtmlSetting(_))>setting*) 
    		then setting2* := <map(try(replace-html))>setting* 
    		else setting2* := [HtmlSetting("index.html")|setting*]
    	end; 
    	if(<fetch(?OutputSetting(_))>setting*)  
    		then newsetting* := <map(try(replace-output))>setting2* 
    		else newsetting* := [OutputSetting($["./native/src"])|setting2*]
    	end	

    replace-html: HtmlSetting(t) -> HtmlSetting("index.html")
    
    replace-output: OutputSetting(t) ->  OutputSetting($["./native/src"])