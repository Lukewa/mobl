module generation/compile

imports
  libstratego-lib
  analyze
  declare
  rename
  desugar
  mobl
  pp
  generation/emit
  generation/cps-action
  generation/cps-lift
  generation/ui
  generation/action
  generation/data
  generation/script
  generation/html
  generation/service
  generation/type
  generation/css
  generation/server
  include/MoBL
  lib/editor-common
  sync-analysis
  style

strategies

  ensure-existing-dir =
    where(project-path := <ProjectPath; string-replace(|"\\", "/")>)
    ; string-replace(|$[[project-path]/], "")
    ; string-tokenize(|<explode-string> "/")
    ; where(old := <getcwd>; <chdir> project-path)
    ; where(map((?"" <+ file-exists <+ mkdir(|"w") <+ debug(!"Failed to created: ")); chdir)
            ; <chdir> old)
    ; separate-by(|"/"); concat-strings

  compile =
      (?Module(qid, def*) <+ ?app@Application(qid, def*))
      ; where(not(ServerContext))
      ; where(<pp-mobl-qid; debug(!"Now compiling: ")> qid
              ; rules ( Compiled : qid ))
      ; analyze
      ; where(alltd(compile-import-module))
      ; {| ModuleName, StyleVar
         : rules ( ModuleName := qid )
         ; desugar-all
         ; module-to-js
         |}
      ; if !app then
          setting* := <get-configuration> $[[<ProjectPath; string-replace(|"\\", "/")>]/config.mobl]
        end
      ; where(path := <qid-to-path> qid
              ; js-filename   := <concat-strings; guarantee-extension(|"js")> [<OutputPath>, "/", path]
              ; css-filename   := <concat-strings; guarantee-extension(|"css")> [<OutputPath>, "/", path]
              ; <dirname; ensure-existing-dir> js-filename
              ; if <fetch-elem(?HtmlSetting(index-html-setting))> setting* then
                  index-html-filename := <concat-strings> [<OutputPath>, "/", index-html-setting]
                else
                  index-html-filename := <concat-strings; guarantee-extension(|"html")> [<OutputPath>, "/", path]
                end
              ; manifest-filename   := <concat-strings; guarantee-extension(|"manifest")> [<OutputPath>, "/", path]
              ; chrome-manifest-filename := <concat-strings> [<OutputPath>, "/manifest.json"])
      ; fp := <fopen> (js-filename, "w")
      ; <fputs> ($[mobl.provides('[<qid-to-js> qid]');
], fp)
      ; if !app then
          <fputs> (<<not(fetch(?DebugSetting())); !"persistence.debug = false;"> setting* <+ !"">, fp)
        end
      ; <fputs> (<get-all>, fp)
      ; <fputs> (<get-all-tl-statements; (cps-lift-expressions; cps-statements <+ debug(!"Could not cps tl statements: "); fail)>, fp)
      ; <fclose> fp
      // CSS
      ; all-css := <get-all-css>
      ; if not("" := all-css) then
          fp_css := <fopen> (css-filename, "w")
          ; <fputs> (all-css, fp_css)
          ; <fclose> fp_css
          ; <refresh-workspace-file> css-filename
        end
      ; if !app then
        with(
          fp2 := <fopen <+ debug(!"Could not open file: "); fail> (index-html-filename, "w")
          ; {| ResourceProcessed
             : <fputs> (<generate-index-html(|<get-all-resources-no-dynamic> qid, setting*) <+ debug(!"Could not generate index.html")> app, fp2)
             |}
          ; <fclose> fp2
          ; <refresh-workspace-file> index-html-filename
          ; if <fetch(?OfflineSetting())> setting* then
              fp3 := <fopen <+ debug(!"Could not open file: "); fail> (manifest-filename, "w")
              ; {| ResourceProcessed
                 : <fputs> (<generate-manifest <+ debug(!"Could not generate index.html")> [<get-all-resources> qid], fp3)
                 |}
              ; <fclose> fp3
              ; <refresh-workspace-file> manifest-filename
            end
         ; fp4 := <fopen <+ debug(!"Could not open file: "); fail> (chrome-manifest-filename, "w")
          ; <fputs> (<generate-chrome-manifest(|<get-all-resources-no-dynamic> qid, setting*)> app, fp4)
          ; <fclose> fp4
          ; <refresh-workspace-file> chrome-manifest-filename
        )
        end
      ; <refresh-workspace-file> js-filename

  get-configuration :
    filename -> setting*
    where file-exists
    with Configuration(setting*) := <parse-file <+ !Configuration([])> filename

  get-configuration :
    filename -> []
    where not(file-exists)

  get-all-resources :
    qid -> [res*, import*, style*, $[[<qid-to-path> qid].js]]
    where not(ResourceProcessed)
    with rules ( ResourceProcessed : qid )
       ; def* := <get-module-defs> qid
       ; res* := <filter((?Resource(<id>) <+ ?Load(<id>)); path-to-string)> def*
       ; import* := <filter((?Import(<id>) <+ ?DynamicImport(<id>)); get-all-resources); concat> def*
       ; if [] := <filter(?ExternalStyle(_, _))> def* then
            style* := []
         else
            style* := [$[[<qid-to-path> qid].css]]
         end

  get-all-resources-no-dynamic :
    qid -> [res*, import*, style*, $[[<qid-to-path> qid].js]]
    where not(ResourceProcessed)
    with rules ( ResourceProcessed : qid )
       ; def* := <get-module-defs> qid
       ; res* := <filter((?Resource(<id>) <+ ?Load(<id>)); path-to-string)> def*
       ; import* := <filter(?Import(<id>); get-all-resources); concat> def*
       ; if [] := <filter(?ExternalStyle(_, _))> def* then
            style* := []
         else
            style* := [$[[<qid-to-path> qid].css]]
         end

  get-all-resources-no-dynamic :
    qid -> []
    where ResourceProcessed

  get-all-resources :
    qid -> []
    where ResourceProcessed

strategies

  qid-to-path =
    is-string

  qid-to-path :
    QId(qid, x) -> $[[qids]/[x]]
    with qids := <qid-to-path> qid
